# name of workflow that will be displayed on the actions page
name: Call Omicron variants

# execute workflow only when these files are modified
on:
  push:
    paths:
      - '.github/workflows/omicron_variants.yml'
  workflow_dispatch:

# a list of the jobs that run as part of the workflow
jobs:
  call_variant:
    runs-on: ubuntu-latest

    # the type of runner to run the given job
    # container: davetang/build:1.1

    # a list of the steps that will run as part of the job
    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "The workflow is now ready to test your code on the runner."

      - name: Prepare environment
        run: |
          mkdir -p tools/bin
          mkdir src
          echo "$GITHUB_WORKSPACE/tools/bin:$GITHUB_WORKSPACE/src/edirect:$GITHUB_WORKSPACE/src/sratoolkit.2.11.3-ubuntu64/bin/" >> $GITHUB_PATH
          cp -r .ncbi ~

      - name: Compile tools
        run: |
          cd src
          wget --quiet https://github.com/lh3/bwa/archive/refs/tags/v0.7.17.tar.gz
          tar -xzf v0.7.17.tar.gz
          cd bwa-0.7.17 && make && mv bwa $GITHUB_WORKSPACE/tools/bin
          cd ..
          ver=1.14
          dir=$GITHUB_WORKSPACE/tools
          for tool in htslib bcftools samtools; do
             url=https://github.com/samtools/${tool}/releases/download/${ver}/${tool}-${ver}.tar.bz2
             wget --quiet ${url}
             tar xjf ${tool}-${ver}.tar.bz2
             cd ${tool}-${ver}
             ./configure --prefix=${dir}
             make && make install
             cd ..
          done

      - name: Install SRA Toolkit and datasets
        run: |
          cd src
          wget --quiet https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.11.3/sratoolkit.2.11.3-ubuntu64.tar.gz
          tar -xzf sratoolkit.2.11.3-ubuntu64.tar.gz
          wget --quiet https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/LATEST/linux-amd64/datasets
          chmod 755 datasets && mv datasets $GITHUB_WORKSPACE/tools/bin

      - name: SnpEff
        run: |
          cd src
          wget --quiet https://snpeff.blob.core.windows.net/versions/snpEff_latest_core.zip
          unzip snpEff_latest_core.zip
          cd snpEff
          java -jar snpEff.jar download NC_045512.2

      - name: Install Entrez Direct
        run: |
          cd src
          url=ftp://ftp.ncbi.nlm.nih.gov/entrez/entrezdirect
          wget --quiet ${url}/edirect.tar.gz
          tar -xzf edirect.tar.gz
          cd edirect
          plt=Linux
          for exc in xtract rchive transmute; do
             wget --quiet ${url}/${exc}.${plt}.gz
             gunzip ${exc}.${plt}.gz
             chmod 755 ${exc}.${plt}
          done

      - name: Download data
        run: |
          mkdir fasta && cd fasta
          datasets download genome accession GCF_009858895.2 --filename GCF_009858895.2.zip --include-gbff --include-gtf
          unzip GCF_009858895.2.zip
          ln -s ncbi_dataset/data/GCF_009858895.2/GCF_009858895.2_ASM985889v3_genomic.fna ref.fa
          bwa index ref.fa
          cd ..
          project=PRJNA784038
          esearch -db sra -query ${project} | efetch -format runinfo > runinfo.csv
          for acc in $(cat runinfo.csv | grep "ILLUMINA" | cut -f1 -d','); do
             fasterq-dump -p --outdir fastq ${acc}
          done

      - name: Align
        run: |
          mkdir bam && cd bam
          ref=$GITHUB_WORKSPACE/fasta/ref.fa
          thread=2
          for acc in $(cat $GITHUB_WORKSPACE/runinfo.csv | grep "ILLUMINA" | cut -f1 -d','); do
             platform=$(cat $GITHUB_WORKSPACE/runinfo.csv | grep ${acc} | cut -f19 -d',')
             sample=$(cat $GITHUB_WORKSPACE/runinfo.csv | grep ${acc} | cut -f25 -d',')
             if [[ -e $GITHUB_WORKSPACE/fastq/${acc}_1.fastq && $GITHUB_WORKSPACE/fastq/${acc}_2.fastq ]]; then
                bwa mem \
                  -t ${thread} \
                  -R "@RG\tID:${acc}\tSM:${sample}\tPL:${platform}" \
                  ${ref} \
                  $GITHUB_WORKSPACE/fastq/${acc}_1.fastq \
                  $GITHUB_WORKSPACE/fastq/${acc}_2.fastq |
                samtools sort -@ ${thread} -O BAM |\
                tee ${acc}.bam |\
                samtools index - ${acc}.bam.bai
             fi
          done

      - name: Remove FASTQ files
        run: rm -rf fastq

      - name: Call variants
        run: |
          mkdir vcf && cd vcf
          ref=$GITHUB_WORKSPACE/fasta/ref.fa
          for bam in $(ls $GITHUB_WORKSPACE/bam/*.bam); do
             base=$(basename ${bam} .bam)
             bcftools mpileup -d 10000 -O v -f ${ref} ${bam} | bcftools call -mv -O v -o ${base}.vcf
             bgzip ${base}.vcf
             tabix -p vcf ${base}.vcf.gz
          done
          bcftools merge -o PRJNA784038_illumina.vcf -O v SRR*.vcf.gz
          bcftools norm PRJNA784038_illumina.vcf -o PRJNA784038_illumina.norm.vcf

      - run: echo "This job's status is ${{ job.status }}."

